#!/usr/bin/env python
from storm.locals import Store, create_database
from service import MediaService
import os
import math
import subprocess
import pygtk
pygtk.require('2.0')
import gtk

class MediaLibrary:
    COVERS = '/data/Media/Movies/Children/Covers/'
    MOVIES = '/data/Media/Movies/Children/'
    COLS = 7
    THUMB_WIDTH = 142
    THUMB_SPACING = 12
    ASPECT_RATIO = 1.4
    WINDOW_HEIGHT = 650

    _table = None

    def __init__(self):
        self._tooltips = gtk.Tooltips()

        window = gtk.Dialog()
        window.connect('destroy', self._close_application)
        window.set_title('Movies')
        window.set_size_request((self.THUMB_WIDTH + self.THUMB_SPACING) * self.COLS, self.WINDOW_HEIGHT)

        scrolled_window = gtk.ScrolledWindow()
        scrolled_window.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        window.vbox.pack_start(self._menu_bar(), False, False, 2)
        window.vbox.pack_start(scrolled_window, True, True, 0)

        # fetch media
        db = create_database('sqlite:///media.db')
        store = Store(db)
        media_service = MediaService(store)

        # movie table
        media_list = media_service.find_by_parent()
        rows = int(math.ceil(media_list.count() / float(self.COLS)))
        self._table = gtk.Table(rows, self.COLS)
        row = 0
        col = 0
        for media in media_list:
            if row >= self.COLS:
                row = 0
                col += 1
            self._add_movie(row, col, media)
            row += 1

        scrolled_window.add_with_viewport(self._table)
        window.set_position(gtk.WIN_POS_CENTER)
        window.show_all()

    def _menu_bar(self):
        # file
        filemenu = gtk.Menu()
        filem = gtk.MenuItem('File')
        filem.set_submenu(filemenu)

        # file | quit
        quitmenu = gtk.MenuItem('Quit')
        quitmenu.connect('activate', self._close_application)
        filemenu.append(quitmenu)

        # movies
        moviesmenu = gtk.Menu()
        moviesm = gtk.MenuItem('Movies')
        moviesm.set_submenu(moviesmenu)

        # movies | add
        addmenu = gtk.MenuItem('Add...')
        addmenu.connect('activate', self._add_movie_dialog)
        moviesmenu.append(addmenu)

        # menu bar
        menu_bar = gtk.MenuBar()
        menu_bar.append(filem)
        menu_bar.append(moviesm)
        return menu_bar

    def _close_application(self, widget):
        gtk.main_quit()
        return False

    def _button_clicked(self, widget, data=None):
        print "totem --replace %s" % data
        subprocess.Popen(['/usr/bin/totem', '--replace', data])

    def _add_movie(self, row, col, media):
        if media.cover is None:
            cover = 'no_cover.jpg'
        else:
            cover = media.cover

        image = gtk.Image()
        pixbuf = gtk.gdk.pixbuf_new_from_file(self.COVERS + cover)
        scaled_buf = pixbuf.scale_simple(self.THUMB_WIDTH, int(self.THUMB_WIDTH * self.ASPECT_RATIO), gtk.gdk.INTERP_BILINEAR)
        image.set_from_pixbuf(scaled_buf)

        button = gtk.Button()
        button.add(image)

        self._tooltips.set_tip(button, media.title)
        self._table.attach(button, row, row + 1, col, col + 1)
        button.connect("clicked", self._button_clicked, self.MOVIES + media.file)

    def _add_movie_dialog(self, widget):
        pass

if __name__ == "__main__":
    MediaLibrary()
    gtk.main()
    0
